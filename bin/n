#!/usr/bin/env bash

#
# Setup.
#

VERSION="1.0.0 (http://git.io/JlhrRQ)"
N_PREFIX=${N_PREFIX-"$HOME/.files/bin/nodejs"}
VERSIONS_DIR=$N_PREFIX/n/versions

test -d "$VERSIONS_DIR" || mkdir -p "$VERSIONS_DIR"

#
# Logging.
#

log() {
	printf "%10s: %s\n" "$1" "$2"
}

#
# Exit with the given message.
#

abort() {
	printf "Error: $@\n" && exit 1
}

#
# Ensure we have cURL.
#

GET=
command -v curl > /dev/null && GET="curl --progress-bar --location"
test -z "$GET" && abort "cURL is required"

#
# Output usage information.
#

display_help() {
	cat <<-EOF
n, simple Node.js version management.
Usage: n [COMMAND] [args ...]

Commands:

    n ls                         List all Node.js versions available
    n installed                  List all Node.js versions installed
    n install VERSION            Install and activate VERSION
    n rm VERSION ...             Remove the given version(s)
    n use VERSION                Activate VERSION and install if needed
    n latest                     Install or activate the latest Node.js release
    n stable                     Install or activate the stable Node.js release

Aliases:

    list         ls
    -            rm
    uninstall    rm

Report bugs to <http://git.io/7_GGfA>.
EOF
	exit 0
}

#
# Output n version.
#

display_n_version() {
	echo "$VERSION" && exit 0
}

#
# Output bin path for version $1.
#

display_bin_path_for_version() {
	test -z "$1" && abort "version required"
	local version=${1#v}
	local bin=$VERSIONS_DIR/$version/bin/node
	if test -f "$bin"; then
		printf "$bin"
		echo
	else
		abort "v$1 is not installed."
	fi
}

#
# Check for installed version, and populate $active.
#

check_current_version() {
	command -v node &> /dev/null
	if test $? -eq 0; then
		active=$(node --version)
		active=${active#v}
	fi
}

#
# Display the versions of node available.
#

display_remote_versions() {
	check_current_version
	local versions=""
	versions=$($GET 2> /dev/null http://nodejs.org/dist/ \
	| egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
	| egrep -v '^0\.[0-7]\.' \
	| egrep -v '^0\.8\.[0-5]$' \
	| sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
	| awk '{ print "  " $1 }')

	echo
	for v in $versions; do
		if test "$active" = "$v"; then
			# Active
			printf "  \033[36m\u2713\033[0m $v\033[0m\n"
		else
			if test -d "$VERSIONS_DIR/$v"; then
				# Installed
				printf "    $v \033[0m\n"
			else
				# Available
				printf "    \033[90m$v\033[0m\n"
			fi
		fi
	done
	echo
}

#
# Display sorted versions directories paths.
#

versions_paths() {
	ls -d "$VERSIONS_DIR/*" 2> /dev/null \
	| egrep "/[0-9]+\.[0-9]+\.[0-9]+$" \
	| sort -k 1,1n -k 2,2n -k 3,3n -t .
}

#
# Display installed versions with $selected.
#

display_versions_with_selected() {
	local selected=$1
	echo
	for dir in $(versions_paths); do
		local version=${dir##*/}
		if test "$version" = "$selected"; then
			# Active
			printf "  \033[36m\u2713\033[0m $version\033[0m\n"
		else
			# Installed
			printf "    \033[90m$version\033[0m\n"
		fi
	done
	echo
}

#
# Display current Node.js version and all others installed.
#

display_versions() {
	check_current_version
	test -z "$active" && abort "no versions installed"
	display_versions_with_selected "$active"
}

#
# Remove versions $1, $2, $3, etc.
#

remove_versions() {
	test -z "$1" && abort "version(s) required"
	while test $# -ne 0; do
		rm -rf "$VERSIONS_DIR/${1#v}"
		shift
	done
}

#
# Check if the HEAD response of <url> is 200.
#

is_ok() {
	curl -Is "$1" | head -n 1 | grep 200 &> /dev/null
}

#
# Activate version $1.
#

activate() {
	local version=$1
	check_current_version
	if test "$version" != "$active"; then
		local dir=$VERSIONS_DIR/$version
		if test -d "$dir"; then
			rsync -K -a "$dir"/* "$N_PREFIX"
		fi
	fi
}

#
# Determine tarball URL for VERSION.
#

tarball_url() {
	local version=$1
	local uname="$(uname -a)"
	local arch=x86
	local os=

	case "$uname" in
		Linux*) os=linux ;;
		Darwin*) os=darwin ;;
		SunOS*) os=sunos ;;
	esac

	case "$uname" in
		*x86_64*) arch=x64 ;;
		*armv6l*) arch=arm-pi ;;
	esac

	echo "http://nodejs.org/dist/v${version}/node-v${version}-${os}-${arch}.tar.gz"
}

#
# Install version $1.
#

install_node() {
	local version=${1#v}

	local dots=$(echo "$version" | sed 's/[^.]*//g')
	if test ${#dots} -eq 1; then
		version=$($GET 2> /dev/null http://nodejs.org/dist/ \
		| egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
		| egrep -v '^0\.[0-7]\.' \
		| egrep -v '^0\.8\.[0-5]$' \
		| sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
		| egrep "^$version" \
		| tail -n1)

		test "$version" || abort "invalid version v${1#v}"
	fi

	local dir=$VERSIONS_DIR/$version
	local url=$(tarball_url "$version")

	if test -d "$dir"; then
		activate "$version"
		exit
	fi

	echo
	is_ok "$url" || abort "invalid version v$version"
	log install "$version"
	log mkdir "$dir"
	mkdir -p "$dir"
	if [ $? -ne 0 ] ; then
		abort "sudo required."
	fi

	cd "$dir"

	log fetch "$url"
	$GET "$url" | tar -zx --strip 1
	printf "\033[1A\033[2K" # Erase line
	activate "$version"
	log installed "$(node --version)"
	echo
}

#
# Display the latest Node.js release version.
#

get_latest_version() {
	$GET 2> /dev/null http://nodejs.org/dist/ \
	| egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
	| sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
	| tail -n1
}

#
# Display the latest stable node release version.
#

get_latest_stable_version() {
	# Stable releases have even minor numbers
	$GET 2> /dev/null http://nodejs.org/dist/ \
	| egrep -o '[0-9]+\.[0-9]*[02468]\.[0-9]+' \
	| sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
	| tail -n1
}

#
# Handle arguments.
#

if test $# -eq 0; then
	display_help
else
	while test $# -ne 0; do
		case $1 in
			-V|--version) display_n_version ;;
			ls|list) display_remote_versions; exit ;;
			installed) display_versions ;;
			-|rm|uninstall) shift; remove_versions $@; exit ;;
			+|use|install) shift; install_node "$1"; exit ;;
			latest) install_node "$(get_latest_version)"; exit ;;
			stable) install_node "$(get_latest_stable_version)"; exit ;;
			*) display_help ;;
		esac
		shift
	done
fi
